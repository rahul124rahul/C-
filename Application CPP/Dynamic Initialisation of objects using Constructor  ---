/* 
Dynamic Initialisation of objects using Constructor */

#include<iostream>
using namespace std;

class BankDeposit{
    int principal ,years;
    float interestRate,returnValue;
    public:
        BankDeposit(){}
        BankDeposit(int p,int y,float r);   // Rate of interest is in decimal form like 0.03 or 0.07
        BankDeposit(int p,int y,int r);     // Here Rate of interest id in percentage form like 3% or 7%
        void show();
};

BankDeposit::BankDeposit(int p,int y , float r){        // This is constructor so here return type not mentioned before class name unlike 
                                                        //      normal function defination defined in the class 
    principal=p;
    years=y;
    interestRate=r;
    returnValue=principal;
    for(int i=0 ; i<years ; i++){
        returnValue=returnValue*(1+interestRate);
    }
}

BankDeposit::BankDeposit(int p , int y, int r){
    principal=p;
    years=y;
    interestRate=float((r)/100);
    cout<<" interest rate = "<<interestRate<<endl;
    returnValue=principal;
    for(int i=0 ; i<years ;i++){
        returnValue=returnValue*(1+interestRate);
    }
}

void BankDeposit::show(){
    cout<<endl<<"Principal amount was "<<principal<<" Return value after "<<years<<" years is "<<returnValue<<endl;
}
    

int main(){
    BankDeposit bd1,bd2,bd3;
    int p,y,R;
    float r;

    cout<<"Enter the values of p , y & r ( here rate of interest must be in decimal ) : "<<endl;
    cin>>p>>y>>r;
    bd1=BankDeposit(p,y,r);
    bd1.show();

    cout<<"Enter the values of p , y & R ( here rate of interest must be in percentage ): "<<endl;
    cin>>p>>y>>R;
    bd2=BankDeposit(p,y,R);
    bd2.show();
    
    return 0;
}




Output :

Enter the values of p , y & r ( here rate of interest must be in decimal ) : 
1200
4
2
Principal amount was 1200 Return value after 4 years is 97200


Enter the values of p , y & R ( here rate of interest must be in percentage ): 
4900
5
2
 interest rate = 0
Principal amount was 4900 Return value after 5 years is 4900
